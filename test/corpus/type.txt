================================================================================
[type] Int
================================================================================

Int

--------------------------------------------------------------------------------

(source_file
  (simple_ref))

================================================================================
[type] Unit
================================================================================

Unit

--------------------------------------------------------------------------------

(source_file
  (simple_ref))

================================================================================
[type] dot type
================================================================================

Int.type

--------------------------------------------------------------------------------

(source_file
  (simple_ref)
  (ERROR))

================================================================================
[type] dots type
================================================================================

scala.util.Try

--------------------------------------------------------------------------------

(source_file
  (simple_ref)
  (ERROR)
  (ERROR)
  (simple_ref))

================================================================================
[type] dots type with type parameter
================================================================================

scala.util.Try[Int]

--------------------------------------------------------------------------------

(source_file
  (simple_ref)
  (ERROR)
  (ERROR)
  (simple_ref)
  (type_args
    (type)))

================================================================================
[type] type parameter
================================================================================

List[Byte]

--------------------------------------------------------------------------------

(source_file
  (simple_ref)
  (type_args
    (type)))

================================================================================
[type] type parameters
================================================================================

Map[Key, Value]

--------------------------------------------------------------------------------

(source_file
  (simple_ref)
  (type_args
    (type)
    (type)))

================================================================================
[type] path-dependent types
================================================================================

SomeType#AnotherType

--------------------------------------------------------------------------------

(source_file
  (simple_ref)
  (simple_ref))

================================================================================
[type] tuple
================================================================================

(Strig, Int)

--------------------------------------------------------------------------------

(ERROR
  (ERROR)
  (simple_ref))

================================================================================
[type] function
================================================================================

String => Int

--------------------------------------------------------------------------------

(source_file
  (fun_params)
  (simple_ref))

================================================================================
[type] function with multiple params
================================================================================

(Int, Strig, Any) => Int

--------------------------------------------------------------------------------

(ERROR
  (ERROR)
  (simple_ref)
  (simple_ref)
  (simple_ref)
  (ERROR))

================================================================================
[type] function with by name params
================================================================================

(Int, =>String, => Any) => Int

--------------------------------------------------------------------------------

(ERROR
  (ERROR)
  (simple_ref)
  (simple_ref)
  (simple_ref)
  (simple_ref)
  (ERROR))

================================================================================
[type] higher order function
================================================================================

(Int => Int) => Int

--------------------------------------------------------------------------------

(source_file
  (ERROR)
  (fun_params)
  (fun_params)
  (ERROR)
  (simple_ref))

================================================================================
[type] tupped function
================================================================================

((Int, Int)) => Int

--------------------------------------------------------------------------------

(ERROR
  (ERROR)
  (simple_ref)
  (simple_ref)
  (ERROR))

================================================================================
[type] union type
================================================================================

Int | String

--------------------------------------------------------------------------------

(source_file
  (simple_ref)
  (simple_ref))

================================================================================
[type] intersection type
================================================================================

Int & String

--------------------------------------------------------------------------------

(source_file
  (simple_ref)
  (simple_ref))

================================================================================
[type] Infix type
================================================================================

Int + String

--------------------------------------------------------------------------------

(source_file
  (simple_ref)
  (simple_ref))

================================================================================
[type] Match type
================================================================================

Int match {
 case String => Unit
}

--------------------------------------------------------------------------------

(source_file
  (simple_ref)
  (match_clause
    (case_clauses
      (case_clause
        (pattern
          (pattern1
            (pattern2
              (infix_pattern
                (simple_pattern
                  (simple_pattern1
                    (simple_ref)))))))
        (block_stat
          (simple_ref))))))

================================================================================
[type] Match type with multiple cases
================================================================================

X match {
 case String => Char
 case Array[T] => Option[T]
 case Iterable[t] => Option[T]
 case AnyVal => X
}

--------------------------------------------------------------------------------

(source_file
  (simple_ref)
  (match_clause
    (case_clauses
      (case_clause
        (pattern
          (pattern1
            (pattern2
              (infix_pattern
                (simple_pattern
                  (simple_pattern1
                    (simple_ref)))))))
        (block_stat
          (simple_ref)))
      (case_clause
        (pattern
          (pattern1
            (pattern2
              (infix_pattern
                (simple_pattern
                  (simple_pattern1
                    (simple_ref))
                  (type_args
                    (type)))))))
        (block_stat
          (simple_ref)
          (type_args
            (type))))
      (case_clause
        (pattern
          (pattern1
            (pattern2
              (infix_pattern
                (simple_pattern
                  (simple_pattern1
                    (simple_ref))
                  (type_args
                    (type)))))))
        (block_stat
          (simple_ref)
          (type_args
            (type))))
      (case_clause
        (pattern
          (pattern1
            (pattern2
              (infix_pattern
                (simple_pattern
                  (simple_pattern1
                    (simple_ref)))))))
        (block_stat
          (simple_ref))))))

================================================================================
[type] Wild card argument
================================================================================

List[?]

--------------------------------------------------------------------------------

(source_file
  (simple_ref)
  (type_args
    (type)))

================================================================================
[type] Wild card arguments
================================================================================

Map[? <: AnyRef, ? >: Null]

--------------------------------------------------------------------------------

(source_file
  (simple_ref)
  (type_args
    (type
      (type))
    (type
      (type))))
