======
[type] Int
======

Int

----

(source_file (type))

======
[type] Unit
======

Unit

----

(source_file (type))

======
[type] dot type
======

Int.type

----

(source_file (type))

======
[type] dots type
======

scala.util.Try

----

(source_file (type))

======
[type] dots type with type parameter
======

scala.util.Try[Int]

----

(source_file (type (type_args (type))))

======
[type] type parameter
======

List[Byte]

----

(source_file (type (type_args (type))))

======
[type] type parameters
======

Map[Key, Value]

----

(source_file (type (type_args (type) (type))))

======
[type] path-dependent types
======

SomeType#AnotherType

----

(source_file (type))

======
[type] tuple
======

(Strig, Int)

----

(source_file (type (type) (type)))

======
[type] function
======

String => Int

----

(source_file (type (type)))

======
[type] function with multiple params
======

(Int, Strig, Any) => Int

----

(source_file
  (type
    (type)
    (type)
    (type)
    (type)))

======
[type] function with by name params
======

(Int, =>Strig, => Any) => Int

----

(source_file
  (type
    (type)
    (type)
    (type)
    (type)))

======
[type] higher order function
======

(Int => Int) => Int

----

(source_file
  (type
    (type (type))
    (type)))

======
[type] tupped function
======

((Int, Int)) => Int

----

(source_file
  (type
    (type
      (type)
      (type))
    (type)))

======
[type] union type
======

Int | String

----

(source_file (type))

======
[type] intersection type
======

Int & String

----

(source_file (type))

======
[type] Infix type
======

Int + String

----

(source_file (type))

======
[type] Match type
======

Int match {
 case String => Unit
}

----

(source_file (type (type_case_clause (type))))

======
[type] Match type with multiple cases
======

X match {
 case String => Char
 case Array[T] => Option[T]
 case Iterable[t] => Option[T]
 case AnyVal => X
}

----
(source_file
  (type (type_case_clause (type))
  (type_case_clause
    (type_args (type))
    (type (type_args (type))))
  (type_case_clause
    (type_args (type))
    (type (type_args (type))))
  (type_case_clause (type))))

======
[type] Wild card argument
======

List[?]

----

(source_file (type (type_args (type))))

======
[type] Wild card arguments
======

Map[? <: AnyRef, ? >: Null]

----

(source_file (type (type_args (type (type)) (type (type)))))
